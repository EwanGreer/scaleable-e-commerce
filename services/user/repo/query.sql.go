// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    email,
    password_hash,
    first_name,
    last_name,
    bio,
    date_of_birth,
    phone_number,
    profile_picture_url,
    address
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, username, email, password_hash, first_name, last_name, created_at, updated_at, is_active, is_admin, last_login, profile_picture_url, bio, date_of_birth, phone_number, address
`

type CreateUserParams struct {
	Username          string
	Email             string
	PasswordHash      string
	FirstName         pgtype.Text
	LastName          pgtype.Text
	Bio               pgtype.Text
	DateOfBirth       pgtype.Date
	PhoneNumber       pgtype.Text
	ProfilePictureUrl pgtype.Text
	Address           []byte
}

// Insert a new user into the users table
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.Bio,
		arg.DateOfBirth,
		arg.PhoneNumber,
		arg.ProfilePictureUrl,
		arg.Address,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.IsAdmin,
		&i.LastLogin,
		&i.ProfilePictureUrl,
		&i.Bio,
		&i.DateOfBirth,
		&i.PhoneNumber,
		&i.Address,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

// Delete a user by their ID
func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password_hash, first_name, last_name, created_at, updated_at, is_active, is_admin, last_login, profile_picture_url, bio, date_of_birth, phone_number, address FROM users
WHERE id = $1
`

// Fetch a single user by their ID
func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.IsAdmin,
		&i.LastLogin,
		&i.ProfilePictureUrl,
		&i.Bio,
		&i.DateOfBirth,
		&i.PhoneNumber,
		&i.Address,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, first_name, last_name, created_at, updated_at, is_active, is_admin, last_login, profile_picture_url, bio, date_of_birth, phone_number, address FROM users
WHERE username = $1
`

// Fetch a single user by their username
func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.IsAdmin,
		&i.LastLogin,
		&i.ProfilePictureUrl,
		&i.Bio,
		&i.DateOfBirth,
		&i.PhoneNumber,
		&i.Address,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password_hash, first_name, last_name, created_at, updated_at, is_active, is_admin, last_login, profile_picture_url, bio, date_of_birth, phone_number, address FROM users
ORDER BY created_at DESC
`

// Fetch all users from the table
func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
			&i.IsAdmin,
			&i.LastLogin,
			&i.ProfilePictureUrl,
			&i.Bio,
			&i.DateOfBirth,
			&i.PhoneNumber,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserActiveStatus = `-- name: SetUserActiveStatus :exec
UPDATE users
SET is_active = $2
WHERE id = $1
`

type SetUserActiveStatusParams struct {
	ID       int32
	IsActive pgtype.Bool
}

// Update the active status of a user
func (q *Queries) SetUserActiveStatus(ctx context.Context, arg SetUserActiveStatusParams) error {
	_, err := q.db.Exec(ctx, setUserActiveStatus, arg.ID, arg.IsActive)
	return err
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE users
SET last_login = CURRENT_TIMESTAMP
WHERE id = $1
`

// Update the last login timestamp for a user
func (q *Queries) UpdateLastLogin(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateLastLogin, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    bio = COALESCE($4, bio),
    date_of_birth = COALESCE($5, date_of_birth),
    phone_number = COALESCE($6, phone_number),
    profile_picture_url = COALESCE($7, profile_picture_url),
    address = COALESCE($8, address),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, username, email, password_hash, first_name, last_name, created_at, updated_at, is_active, is_admin, last_login, profile_picture_url, bio, date_of_birth, phone_number, address
`

type UpdateUserParams struct {
	ID                int32
	FirstName         pgtype.Text
	LastName          pgtype.Text
	Bio               pgtype.Text
	DateOfBirth       pgtype.Date
	PhoneNumber       pgtype.Text
	ProfilePictureUrl pgtype.Text
	Address           []byte
}

// Update a user's information
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Bio,
		arg.DateOfBirth,
		arg.PhoneNumber,
		arg.ProfilePictureUrl,
		arg.Address,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
		&i.IsAdmin,
		&i.LastLogin,
		&i.ProfilePictureUrl,
		&i.Bio,
		&i.DateOfBirth,
		&i.PhoneNumber,
		&i.Address,
	)
	return i, err
}
